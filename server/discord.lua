-- Funciones para Discord Webhooks

-- Funci√≥n para enviar webhook a Discord
local function SendDiscordWebhook(webhookType, title, description, fields, color)
    if not Config.Discord.EnableWebhooks then return end
    
    local logConfig = Config.Discord.LogTypes[webhookType]
    if not logConfig or not logConfig.enabled then 
        if Config.Logging.EnableLogs then
            print('[DrTokens] Webhook deshabilitado para tipo: ' .. webhookType)
        end
        return 
    end
    
    local webhookUrl = Config.Discord.Webhooks[logConfig.webhook]
    if not webhookUrl then
        print('[DrTokens] Error: No webhook URL found for ' .. logConfig.webhook .. ' (type: ' .. webhookType .. ')')
        return 
    end
    
    if string.find(webhookUrl, 'TU_WEBHOOK') then 
        print('[DrTokens] Warning: Webhook URL not configured for ' .. webhookType .. ' (' .. logConfig.webhook .. ')')
        print('[DrTokens] Please configure a real Discord webhook URL in config.lua')
        return 
    end
    
    -- Validar que la URL sea v√°lida
    if not string.match(webhookUrl, 'https://discord%.com/api/webhooks/%d+/[%w%-_]+') then
        print('[DrTokens] Error: Invalid webhook URL format for ' .. webhookType)
        return
    end
    
    local embedColor = Config.Discord.Colors[color or logConfig.color] or Config.Discord.Colors.Info
    
    -- Validar campos
    local validFields = {}
    if fields then
        for _, field in ipairs(fields) do
            if field.name and field.value then
                table.insert(validFields, {
                    name = tostring(field.name),
                    value = tostring(field.value),
                    inline = field.inline or false
                })
            end
        end
    end
    
    local embed = {
        {
            title = title or logConfig.title or 'DrTokens Event',
            description = description or 'Sin descripci√≥n',
            color = embedColor,
            fields = validFields,
            footer = {
                text = Config.Discord.ServerInfo.footer .. ' ‚Ä¢ ' .. os.date('%d/%m/%Y %H:%M:%S'),
                icon_url = Config.Discord.ServerInfo.icon
            },
            author = {
                name = Config.Discord.ServerInfo.name,
                icon_url = Config.Discord.ServerInfo.icon
            },
            timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ')
        }
    }
    
    PerformHttpRequest(webhookUrl, function(err, text, headers) 
        if err == 200 or err == 204 then
            -- 200 = OK, 204 = No Content (ambos son √©xito para webhooks)
            if Config.Logging.EnableLogs and Config.Logging.VerboseWebhooks then
                print('[DrTokens] Discord webhook enviado correctamente (' .. webhookType .. ')')
            end
        else
            print('[DrTokens] Error sending Discord webhook (' .. webhookType .. '): HTTP ' .. err)
            if text then
                print('[DrTokens] Response: ' .. text)
            end
        end
    end, 'POST', json.encode({
        username = 'DrTokens Bot',
        avatar_url = Config.Discord.ServerInfo.icon or '',
        embeds = embed
    }), { ['Content-Type'] = 'application/json' })
end

-- Funci√≥n para log de acciones de administrador
function LogAdminAction(adminName, adminId, action, targetName, targetId, amount)
    if not Config.Discord.EnableWebhooks then return end
    
    local actionType = action == 'add' and 'AdminAddTokens' or 'AdminRemoveTokens'
    local actionText = action == 'add' and 'a√±adido' or 'retirado'
    local emoji = action == 'add' and '‚ûï' or '‚ûñ'
    
    local description = string.format('%s **%s** ha %s **%d DrTokens** %s **%s**', 
        emoji, adminName, actionText, amount, action == 'add' and 'a' or 'de', targetName)
    
    local fields = {
        {
            name = 'üëÆ‚Äç‚ôÇÔ∏è Administrador',
            value = string.format('%s (ID: %s)', adminName, adminId),
            inline = true
        },
        {
            name = 'üë§ Jugador Objetivo',
            value = string.format('%s (ID: %s)', targetName, targetId),
            inline = true
        },
        {
            name = 'üí∞ Cantidad',
            value = string.format('%d DrTokens', amount),
            inline = true
        }
    }
    
    SendDiscordWebhook(actionType, nil, description, fields)
end

-- Funci√≥n para log de recompensas por hora
function LogHourlyReward(playerName, playerId, amount, totalTokens)
    if not Config.Discord.EnableWebhooks then return end
    
    local description = string.format('‚è∞ **%s** ha recibido **%d DrTokens** por jugar una hora completa', 
        playerName, amount)
    
    local fields = {
        {
            name = 'üë§ Jugador',
            value = string.format('%s (ID: %s)', playerName, playerId),
            inline = true
        },
        {
            name = 'üí∞ Tokens Recibidos',
            value = string.format('%d DrTokens', amount),
            inline = true
        },
        {
            name = 'üè¶ Total de Tokens',
            value = string.format('%d DrTokens', totalTokens),
            inline = true
        }
    }
    
    SendDiscordWebhook('HourlyReward', nil, description, fields)
end

-- Funci√≥n para log de transferencias entre jugadores üÜï
function LogTokenTransfer(fromName, fromId, toName, toId, amount)
    if not Config.Discord.EnableWebhooks then return end
    
    local description = string.format('üîÑ **%s** ha transferido **%d DrTokens** a **%s**', 
        fromName, amount, toName)
    
    local fields = {
        {
            name = 'üë§ De',
            value = string.format('%s (ID: %s)', fromName, fromId),
            inline = true
        },
        {
            name = 'üë§ Para',
            value = string.format('%s (ID: %s)', toName, toId),
            inline = true
        },
        {
            name = 'üí∞ Cantidad',
            value = string.format('%d DrTokens', amount),
            inline = true
        }
    }
    
    SendDiscordWebhook('PlayerActions', 'üîÑ Transferencia de Tokens', description, fields, 'Info')
end

-- Funci√≥n para log de bonificaciones especiales üÜï
function LogBonusReward(playerName, playerId, bonusType, amount, totalReceived)
    if not Config.Discord.EnableWebhooks then return end
    
    local bonusEmojis = {
        daily = 'üåÖ',
        weekend = 'üéâ',
        consecutive = '‚è∞'
    }
    
    local bonusNames = {
        daily = 'Bonificaci√≥n Diaria',
        weekend = 'Bonificaci√≥n de Fin de Semana',
        consecutive = 'Bonificaci√≥n por Horas Consecutivas'
    }
    
    local emoji = bonusEmojis[bonusType] or 'üéÅ'
    local bonusName = bonusNames[bonusType] or 'Bonificaci√≥n Especial'
    
    local description = string.format('%s **%s** ha recibido **%d DrTokens** por %s', 
        emoji, playerName, amount, bonusName:lower())
    
    local fields = {
        {
            name = 'üë§ Jugador',
            value = string.format('%s (ID: %s)', playerName, playerId),
            inline = true
        },
        {
            name = 'üéÅ Tipo de Bonus',
            value = bonusName,
            inline = true
        },
        {
            name = 'üí∞ Bonus Recibido',
            value = string.format('%d DrTokens', amount),
            inline = true
        }
    }
    
    if totalReceived then
        table.insert(fields, {
            name = 'üèÜ Total Recibido',
            value = string.format('%d DrTokens', totalReceived),
            inline = true
        })
    end
    
    SendDiscordWebhook('HourlyRewards', emoji .. ' ' .. bonusName, description, fields, 'Success')
end

-- Funci√≥n para log de comandos de ranking üÜï
function LogRankingCommand(playerName, playerId)
    if not Config.Discord.EnableWebhooks then return end
    
    local description = string.format('üèÜ **%s** ha consultado el ranking de DrTokens', playerName)
    
    local fields = {
        {
            name = 'üë§ Jugador',
            value = string.format('%s (ID: %s)', playerName, playerId),
            inline = true
        },
        {
            name = 'üìä Comando',
            value = '/toptokens',
            inline = true
        },
        {
            name = 'üïê Hora',
            value = os.date('%H:%M:%S'),
            inline = true
        }
    }
    
    SendDiscordWebhook('PlayerActions', 'üèÜ Consulta de Ranking', description, fields, 'Info')
end

-- Funci√≥n para log de permisos denegados üÜï
function LogPermissionDenied(playerName, playerId, command, reason)
    if not Config.Discord.EnableWebhooks then return end
    
    local description = string.format('üö´ **%s** intent√≥ usar **%s** pero se le deneg√≥ el acceso', 
        playerName, command)
    
    local fields = {
        {
            name = 'üë§ Jugador',
            value = string.format('%s (ID: %s)', playerName, playerId),
            inline = true
        },
        {
            name = '‚å®Ô∏è Comando',
            value = command,
            inline = true
        },
        {
            name = 'üö´ Raz√≥n',
            value = reason or 'Sin permisos',
            inline = true
        }
    }
    
    SendDiscordWebhook('AdminActions', 'üö´ Acceso Denegado', description, fields, 'Warning')
end

-- Funci√≥n para log de conexi√≥n de jugadores
function LogPlayerConnection(playerName, playerId, action)
    if not Config.Discord.EnableWebhooks then return end
    
    local actionType = action == 'login' and 'PlayerLogin' or 'PlayerLogout'
    local actionText = action == 'login' and 'conectado' or 'desconectado'
    local emoji = action == 'login' and 'üîì' or 'üîí'
    
    local description = string.format('%s **%s** se ha %s al servidor', 
        emoji, playerName, actionText)
    
    local fields = {
        {
            name = 'üë§ Jugador',
            value = string.format('%s (ID: %s)', playerName, playerId),
            inline = true
        },
        {
            name = 'üïê Hora',
            value = os.date('%H:%M:%S'),
            inline = true
        }
    }
    
    SendDiscordWebhook(actionType, nil, description, fields)
end

-- Funci√≥n para log de inicio del sistema
function LogSystemStart()
    if not Config.Discord.EnableWebhooks then return end
    
    local description = 'üöÄ **Sistema DrTokens iniciado correctamente**\n\n' ..
                       'üìä **Configuraci√≥n Actual:**\n' ..
                       string.format('‚Ä¢ Recompensa por hora: **%d tokens**\n', Config.HourlyReward) ..
                       string.format('‚Ä¢ Verificaci√≥n cada: **%d segundos**\n', Config.TimeSettings.CheckInterval / 1000) ..
                       string.format('‚Ä¢ Logs habilitados: **%s**', Config.Logging.EnableLogs and 'S√≠' or 'No')
    
    local fields = {
        {
            name = '‚öôÔ∏è Estado',
            value = 'Sistema Operativo',
            inline = true
        },
        {
            name = 'üìÖ Fecha',
            value = os.date('%d/%m/%Y'),
            inline = true
        },
        {
            name = 'üïê Hora',
            value = os.date('%H:%M:%S'),
            inline = true
        }
    }
    
    SendDiscordWebhook('SystemStart', nil, description, fields)
end

-- Funci√≥n para log de comandos de jugadores
function LogPlayerCommand(playerName, playerId, command, tokens)
    if not Config.Discord.EnableWebhooks then return end
    
    local description = string.format('üìã **%s** ha usado el comando **%s**', 
        playerName, command)
    
    local fields = {
        {
            name = 'üë§ Jugador',
            value = string.format('%s (ID: %s)', playerName, playerId),
            inline = true
        },
        {
            name = '‚å®Ô∏è Comando',
            value = command,
            inline = true
        }
    }
    
    if tokens then
        table.insert(fields, {
            name = 'üí∞ Tokens Actuales',
            value = string.format('%d DrTokens', tokens),
            inline = true
        })
    end
    
    SendDiscordWebhook('PlayerActions', 'üìã Comando Ejecutado', description, fields)
end

-- Funci√≥n para log de comandos desde consola
function LogConsoleCommand(commandName)
    if not Config.Discord.EnableWebhooks then return end
    
    local description = string.format('‚ö†Ô∏è Se intent√≥ ejecutar el comando **%s** desde la consola del servidor.\n\nEste comando requiere ser ejecutado por un jugador conectado.', commandName)
    
    local fields = {
        {
            name = '‚å®Ô∏è Comando',
            value = commandName,
            inline = true
        },
        {
            name = 'üñ•Ô∏è Origen',
            value = 'Consola del Servidor',
            inline = true
        },
        {
            name = 'üïê Hora',
            value = os.date('%H:%M:%S'),
            inline = true
        }
    }
    
    SendDiscordWebhook('ConsoleCommand', '‚ö†Ô∏è Comando desde Consola', description, fields, 'Warning')
end

-- Funci√≥n para log de tokens dados a todos los jugadores
function LogTokensToAll(adminName, adminId, amount, playersCount, isConsole)
    if not Config.Discord.EnableWebhooks then return end
    
    local origin = isConsole and 'Consola del Servidor' or ('Jugador Admin (ID: ' .. adminId .. ')')
    local description = string.format('üéâ **%s** ha dado **%d DrTokens** a **%d jugadores** online', 
        adminName, amount, playersCount)
    
    local fields = {
        {
            name = 'üëÆ‚Äç‚ôÇÔ∏è Ejecutado por',
            value = adminName,
            inline = true
        },
        {
            name = 'üñ•Ô∏è Origen',
            value = origin,
            inline = true
        },
        {
            name = 'üí∞ Cantidad por Jugador',
            value = amount .. ' DrTokens',
            inline = true
        },
        {
            name = 'üë• Jugadores Afectados',
            value = playersCount .. ' jugadores online',
            inline = true
        },
        {
            name = 'üè¶ Total Distribuido',
            value = (amount * playersCount) .. ' DrTokens',
            inline = true
        },
        {
            name = 'üïê Hora',
            value = os.date('%H:%M:%S'),
            inline = true
        }
    }
    
    SendDiscordWebhook('MassTokens', 'üéâ Tokens Masivos Distribuidos', description, fields, 'Success')
end

-- Funci√≥n para probar webhook (solo para admins)
function TestDiscordWebhook(webhookType)
    webhookType = webhookType or 'General'
    
    local description = 'üß™ **Test de webhook desde DrTokens**\n\nSi ves este mensaje, el webhook est√° funcionando correctamente.'
    
    local fields = {
        {
            name = 'üîß Tipo de Test',
            value = webhookType,
            inline = true
        },
        {
            name = 'üìÖ Fecha',
            value = os.date('%d/%m/%Y'),
            inline = true
        },
        {
            name = 'üïê Hora',
            value = os.date('%H:%M:%S'),
            inline = true
        }
    }
    
    SendDiscordWebhook(webhookType, 'üß™ Test de Webhook', description, fields, 'Info')
end

-- Funci√≥n para log personalizado
function LogCustomEvent(title, description, fields, color, webhookType)
    if not Config.Discord.EnableWebhooks then return end
    
    webhookType = webhookType or 'General'
    SendDiscordWebhook(webhookType, title, description, fields, color)
end

-- Exports para usar desde otros archivos
exports('LogAdminAction', LogAdminAction)
exports('LogAdminSetTokens', LogAdminSetTokens)
exports('LogHourlyReward', LogHourlyReward)
exports('LogBonusReward', LogBonusReward)
exports('LogTokenTransfer', LogTokenTransfer)
exports('LogRankingCommand', LogRankingCommand)
exports('LogPermissionDenied', LogPermissionDenied)
exports('LogPlayerConnection', LogPlayerConnection)
exports('LogSystemStart', LogSystemStart)
exports('LogPlayerCommand', LogPlayerCommand)
exports('LogConsoleCommand', LogConsoleCommand)
exports('LogTokensToAll', LogTokensToAll)
exports('TestDiscordWebhook', TestDiscordWebhook)
exports('LogCustomEvent', LogCustomEvent)